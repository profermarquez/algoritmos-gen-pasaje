'''
Explicaci√≥n breve del Algoritmo
Codificaci√≥n (Genotipo)
Representamos cada soluci√≥n: Representamos cada soluci√≥n como una cadena binaria de 5 bits (por ejemplo, 10110), ya que 
2 elevado a 5 = 32

Decodificaci√≥n (Fenotipo)
La cadena binaria se convierte a un n√∫mero decimal para poder evaluar 
ùëì(ùë•)= Xcuadrada

Funci√≥n de Fitness
Dado un valor 

Generaci√≥n de Poblaci√≥n Inicial
Creamos varias cadenas de 5 bits de forma aleatoria para iniciar la ‚Äúpoblaci√≥n‚Äù.

Selecci√≥n
Elegimos los individuos m√°s aptos (de mayor fitness) como padres para la siguiente generaci√≥n.

Cruza (Crossover)
Mezclamos partes de bits de dos padres para producir nuevos hijos.

Mutaci√≥n
Con una baja probabilidad, se cambia uno o m√°s bits en un cromosoma para introducir variabilidad.

Iteraci√≥n
Se repite selecci√≥n, cruza y mutaci√≥n por varias generaciones. Esperamos que, con el tiempo, aparezca un cromosoma que represente el valor de 

'''

import random

# ---------------------------------------------------------------------------------
# Par√°metros del algoritmo
# ---------------------------------------------------------------------------------
LONGITUD_CROMOSOMA = 5    # 5 bits para representar x en [0, 31]
TAMANO_POBLACION = 10     # N√∫mero de individuos en la poblaci√≥n
PROB_CRUZA = 0.8          # Probabilidad de cruza
PROB_MUTACION = 0.01      # Probabilidad de mutaci√≥n
GENERACIONES = 20         # Cu√°ntas iteraciones (generaciones) realizar√° el GA

# ---------------------------------------------------------------------------------
# Funciones de codificaci√≥n y decodificaci√≥n
# ---------------------------------------------------------------------------------
def generar_cromosoma():
    """
    Genera un cromosoma aleatorio de 5 bits (cadena de 0s y 1s).
    """
    return ''.join(random.choice(['0', '1']) for _ in range(LONGITUD_CROMOSOMA))

def decodificar_cromosoma(cromosoma):
    """
    Convierte la cadena binaria (genotipo) a un n√∫mero entero (fenotipo).
    """
    return int(cromosoma, 2)

# ---------------------------------------------------------------------------------
# Funci√≥n de aptitud (fitness)
# ---------------------------------------------------------------------------------
def fitness(cromosoma):
    """
    Calcula f(x) = x^2 para el cromosoma decodificado.
    Mientras mayor sea este valor, m√°s "apto" es el cromosoma.
    """
    x = decodificar_cromosoma(cromosoma)
    return x * x

# ---------------------------------------------------------------------------------
# Creaci√≥n de poblaci√≥n inicial
# ---------------------------------------------------------------------------------
def crear_poblacion_inicial():
    """
    Crea la poblaci√≥n inicial de TAMANO_POBLACION cromosomas aleatorios.
    """
    return [generar_cromosoma() for _ in range(TAMANO_POBLACION)]

# ---------------------------------------------------------------------------------
# Operador de selecci√≥n
# ---------------------------------------------------------------------------------
def seleccionar(poblacion):
    """
    Selecciona dos padres de la poblaci√≥n usando selecci√≥n por torneo simple:
    - Se eligen 'n' individuos al azar y se escoge el de mayor fitness.
    - Se repite dos veces para obtener dos padres.
    """
    # Tama√±o del torneo (puede ajustarse)
    torneo_size = 3

    def torneo():
        # Elige 'torneo_size' individuos al azar
        candidatos = random.sample(poblacion, torneo_size)
        # Devuelve el que tenga mayor fitness
        return max(candidatos, key=fitness)

    padre1 = torneo()
    padre2 = torneo()
    return padre1, padre2

# ---------------------------------------------------------------------------------
# Operador de cruza (crossover)
# ---------------------------------------------------------------------------------
def cruzar(padre1, padre2):
    if random.random() < PROB_CRUZA:
        punto_cruce = random.randint(1, LONGITUD_CROMOSOMA - 1)
        
        # Partes de cada padre
        left_p1  = padre1[:punto_cruce]
        right_p1 = padre1[punto_cruce:]
        left_p2  = padre2[:punto_cruce]
        right_p2 = padre2[punto_cruce:]
        
        # Combinar para obtener hijos de 5 bits
        hijo1 = left_p1 + right_p2  # Padre1 izquierda + Padre2 derecha
        hijo2 = left_p2 + right_p1  # Padre2 izquierda + Padre1 derecha
        
        return hijo1, hijo2
    else:
        # Sin cruza, devolvemos tal cual
        return padre1, padre2

# ---------------------------------------------------------------------------------
# Operador de mutaci√≥n
# ---------------------------------------------------------------------------------
def mutar(cromosoma):
    """
    Con probabilidad PROB_MUTACION, voltea bits del cromosoma.
    """
    cromosoma_list = list(cromosoma)
    for i in range(LONGITUD_CROMOSOMA):
        if random.random() < PROB_MUTACION:
            cromosoma_list[i] = '1' if cromosoma_list[i] == '0' else '0'
    return ''.join(cromosoma_list)

# ---------------------------------------------------------------------------------
# B√∫squeda del mejor individuo en la poblaci√≥n
# ---------------------------------------------------------------------------------
def mejor_individuo(poblacion):
    """
    Retorna el cromosoma con el mejor valor de fitness en la poblaci√≥n.
    """
    return max(poblacion, key=fitness)

# ---------------------------------------------------------------------------------
# Funci√≥n principal que corre el Algoritmo Gen√©tico
# ---------------------------------------------------------------------------------
def algoritmo_genetico():
    # 1. Crear poblaci√≥n inicial
    poblacion = crear_poblacion_inicial()

    for gen in range(GENERACIONES):
        nueva_poblacion = []

        # 2. Generar nueva poblaci√≥n usando selecci√≥n, cruza y mutaci√≥n
        while len(nueva_poblacion) < TAMANO_POBLACION:
            padre1, padre2 = seleccionar(poblacion)
            hijo1, hijo2 = cruzar(padre1, padre2)
            hijo1 = mutar(hijo1)
            hijo2 = mutar(hijo2)
            nueva_poblacion.append(hijo1)
            if len(nueva_poblacion) < TAMANO_POBLACION:
                nueva_poblacion.append(hijo2)

        # 3. Reemplazar la poblaci√≥n anterior por la nueva
        poblacion = nueva_poblacion

        # 4. Revisar el mejor de la generaci√≥n
        mejor = mejor_individuo(poblacion)
        print(f"Generaci√≥n {gen+1}: Mejor Cromosoma = {mejor}, Valor = {decodificar_cromosoma(mejor)}, Fitness = {fitness(mejor)}")

    # 5. Resultado final
    mejor_final = mejor_individuo(poblacion)
    x_optimo = decodificar_cromosoma(mejor_final)
    print("\n=== RESULTADO FINAL ===")
    print(f"Mejor Cromosoma: {mejor_final}")
    print(f"Mejor x: {x_optimo}")
    print(f"Fitness: {fitness(mejor_final)}")


if __name__ == "__main__":
    algoritmo_genetico()
